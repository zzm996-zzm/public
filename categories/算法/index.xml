<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 张志明</title>
    <link>https://example.com/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 张志明</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PriorityQueue And  Greedy</title>
      <link>https://example.com/p/priorityqueue_greedy/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/priorityqueue_greedy/</guid>
      <description>今天的每日一题还比较有趣~ 题目描述 这个是2021-12-24的每日一题，平安夜官方还是挺有趣弄了个吃苹果。
Leetcode 「1705. 吃苹果的最大数目」
Tag : 「贪心」、「优先队列」
 有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。
你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。
给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。
示例 1：
输入：apples = [1,2,3,5,2], days = [3,2,1,4,2] 输出：7 解释：你可以吃掉 7 个苹果： - 第一天，你吃掉第一天长出来的苹果。 - 第二天，你吃掉一个第二天长出来的苹果。 - 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。 - 第四天到第七天，你吃的都是第四天长出来的苹果。 示例 2：
输入：apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2] 输出：5 解释：你可以吃掉 5 个苹果： - 第一天到第三天，你吃的都是第一天长出来的苹果。 - 第四天和第五天不吃苹果。 - 第六天和第七天，你吃的都是第六天长出来的苹果。  其实一开始我也没往这块想，我个人觉得贪心是挺难的，它没有什么章法套路啊，就是一个思想。也没有模板不像堆，堆的概念很清晰，大根堆、小根堆。顺手点开题解看了一眼就说是堆去解。下面就理一下思路</description>
    </item>
    
    <item>
      <title>Rabin-Karp</title>
      <link>https://example.com/p/rabin-karp/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/rabin-karp/</guid>
      <description>今天学一下字符串Hash 题目描述 这个是前置题，如果不想看可以往后跳
这是 LeetCode 上的 「187. 重复的DNA序列」，难度为 「中等」。
Tag : 「滑动窗口」、「哈希表」、「字符串哈希」、「前缀和」
 所有 DNA 都由一系列缩写为 &#39;A&#39;，&#39;C&#39;，&#39;G&#39; 和 &#39;T&#39; 的核苷酸组成，例如：&amp;quot;ACGAATTCCG&amp;quot;。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。
编写一个函数来找出所有目标子串，目标子串的长度为10 ，且在 DNA 字符串 s 中出现次数超过一次。
  示例 1：
输入：s = &amp;quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&amp;quot; 输出：[&amp;quot;AAAAACCCCC&amp;quot;,&amp;quot;CCCCCAAAAA&amp;quot;] 示例 2：
输入：s = &amp;quot;AAAAAAAAAAAAA&amp;quot; 输出：[&amp;quot;AAAAAAAAAA&amp;quot;]   滑动窗口 其实最朴素的做法，看完题目我个人的第一反应就是滑动窗口，由于限定了DNA字符串长度10，所以只需要限定窗口为10，每次往右滑就行了。然后将每次滑动的结果保存到map中 ，只要map出现了重复的元素就可以添加到result里面
func findRepeatedDnaSequences(s string) []string { m:=make(map[string]int) L := 10 res := []string{} for i:=0;i&amp;lt;=len(s)-L;i++{ //获取substr  sub := s[i:L+i] m[sub] ++ //如果sub str 有2个了 那么就加入到结果集  if m[sub]==2{ res = append(res,s[i:L+i]) } } //返回结果集  return res } 字符串Hash 接着今天的主题，字符串Hash做法，在极客时间专栏中复习了一遍Java JDK hash的做法</description>
    </item>
    
  </channel>
</rss>
